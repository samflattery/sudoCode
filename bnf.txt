<type> ::= <a whole number> | <a sequence of characters> | <character> | <a true or false value> | <a value with a decimal point>

<integer> ::= "0...9"*
<character> ::= "a...z" | "A...Z" | "0...9"
<string> ::= <character>*
<boolean> ::= true | false
<float> ::= "0...9"* "." "0...9"*

<boolean_operator> ::= and also | or else | not

<comparison_operator> ::= is less than | is greater than | is equal to
                        | is greater than or equal to | is less than or equal to

<arith_operator> ::= "added to" | "subtracted from" | "multiplied by"
                   | "divided by" | modulo"

<name> ::= <anything but a keyword>

<qualified_name> ::= "a" <type> "called" <name>
                   | "an" <integer> "called" <name>

<declaration> ::= "declare that" <qualified name> "exists and instantiate it to the value of" <expression>

<set_variable> ::= "set the value of <name> to be the value of <expression>"

<arith_expression> ::= "compute the value of" <name> <operator> <name> "and store it in" <name>

<func_declaration> ::= "define a function called <name> that takes in" <qualified name> "and returns" "a" | "an" <type> by executing the code between the following curly braces { <expressions> }

<main_func_declaration> ::= "define the function that the program will start executing in that takes in nothing and returns a whole number by executing the code between the following curly braces"

<if_statement> ::= if it is true that <boolean_expression>, then execute the instructions between the following curly braces { <expressions> }
                |  else, if it is true that <boolean_expression>, then execute the instructions between the following curly braces { <expressions> }
                |  else, if none of the above are true, then execute the code between the following curly braces { <expressions> }

<for_loop> ::= <set_variable> | <declaration> "and while it is true that" <expression> ", execute the instructions between the following curly braces, performing <expression> at the end of every loop { <expressions> }"

<while_loop> ::= "while it is true that <expression>" ", execute the instructions between the following curly braces { <expressions> }

<return> ::= "return the value of <expression from this function"

<printing> ::= "output the value of <expression> on to the screen in the form of a <type>"

Hello world:
------------

define the function that the program will start executing in that takes in nothing and returns a whole number by executing the code between the following curly braces {
	declare that a sequence of characters called hello exists and instantiate it to the value of "hello world\n" and end this line here
	output the value of hello on to the screen in the form of a sequence of characters and end this line here
	return the value of 0 from this function and end this line here
}
