# Grammar for sudoCode
# BNF form largely inspired by C grammar specification found at:
# https://cs.wmich.edu/~gupta/teaching/cs4850/sumII06/The%20syntax%20of%20C%20in%20Backus-Naur%20form.htm

<type-specifier> ::= a whole number
                   | a sequence of characters
                   | a character
                   | a true or false value
                   | a real number

<boolean-operator> ::= and also | or else | not

<comparison-operator> ::= is less than
                        | is greater than
                        | is equal to
                        | is greater than or equal to
                        | is less than or equal to

<multiplicative-operator> ::= multiplied by
                            | divided by
                            | modulo

<additive-operator> ::= added to
                      | subtracted from

<primary-expression> ::= <identifier>
                       | <constant>

<constant> ::= <integer-constant>
             | <character-constant>
             | <floating-constant>
			 | <string-constant>

<unary-operator> ::= -

<unary-expression> ::= <unary-operator> <unary-expression>
					 | <primary-expression>

<declarator> ::= <type-specifier> called <identifier>

<declaration-expression> ::= declare that <declarator> exists and <assignment-operator> (<expression> | <primary-expression>)

<assignment-expression> ::= <assignment-operator> <expression>

<assignment-operator> ::= assign ( <it> | <identifier> ) the value of

<arithmetic-expression> ::= <term> (<additive-operator> <term>)*

<term> ::= <factor> (<multiplicative-operator> <factor>)*

<factor> ::= <primary-expression>

<expression> ::= <assignment-expression>
               | <arithmetic-expression>
			   | <declaration-expression>

<eol> ::= and then end this line

<statement> ::= <expression-statement>
              | <if-statement>
              | <iteration-statement>
              | <jump-statement>
              | <compound-statement>

<compound-statement> ::= { {<declaration>}* {<statement>}*}

<curly-brace-id> ::= execute the instructions between the following curly braces

<expression-statement> ::= (<expression>)? <eol>

<if-statement> ::= if it is true that <expression>, then <curly-brace-id> { <statement> }
                 | if it is true that <expression>, then <curly-brace-id> { <statement> }, else, if the above are false, then <curly-brace-id> { <statement> }

<iteration-statement> ::= <expression> and while it is true that <expression>, <curly-brace-id>, performing <expression> at the end of every loop { <statement> }
                        | <while it is true that <expression>, <curly-brace-id> { <statements> }

<jump-statement> ::= return the value of <expression> from this function

<declaration-list> ::= <declaration>
                     | <declaration>, <declaration-list>

<func-definition> ::= define a function called <identifier> that takes in <declaration-list> and returns <type-specifier> that will <curly-brace-id> { <compound-statement> }

<main_func_declaration> ::= "define the function that the program will start executing in that takes in nothing and returns a whole number that will <curly-brace-id> { <compound-statement> }"

<printing> ::= "output the value of <expression> to the terminal in the form of a <type>"


Hello world:
------------
define the function that the program will start executing in that takes in nothing and returns a whole number by executing the code between the following curly braces {
    declare that a sequence of characters called hello exists and assign it the value of "hello world\n" and then end this line
    output the value of hello on to the screen in the form of a sequence of characters and then end this line
    return the value of 0 from this function and then end this line
}
